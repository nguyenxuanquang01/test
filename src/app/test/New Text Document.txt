import { Component, NgModule } from '@angular/core';
import {
  trigger,
  transition,
  style,
  animate,
  query,
  stagger,
  state,
  keyframes,
} from '@angular/animations';

import { MatTableModule } from '@angular/material';

@NgModule({
  imports: [
    // ...
    MatTableModule,
    // ...
  ],
})
@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  animations: [
    trigger('slideAnimation', [
      // Slide in from right (new table) and out to left (old table)
      state('left', style({ transform: 'translateX(0)' })),
      transition('* => left', [
        style({ transform: 'translateX(100%)' }), // New table comes from right
        animate('6000ms ease'),
      ]),
      transition('left => *', [
        animate('6000ms ease', style({ transform: 'translateX(-100%)' })), // Old table leaves to the left
      ]),

      // Slide in from left (new table) and out to right (old table)
      state('right', style({ transform: 'translateX(0)' })),
      transition('* => right', [
        style({ transform: 'translateX(-100%)' }), // New table comes from left
        animate('6000ms ease'),
      ]),
      transition('right => *', [
        animate('6000ms ease', style({ transform: 'translateX(100%)' })), // Old table leaves to the right
      ]),
    ]),
  ],
})
export class AppComponent {
  dataSource1 = [
    { name: 'John', age: 25 },
    { name: 'Jane', age: 30 },
    { name: 'Paul', age: 35 },
  ];

  dataSource2 = [
    { name: 'Anna', age: 28, job: 'Developer' },
    { name: 'Tom', age: 40, job: 'Designer' },
    { name: 'Emily', age: 50, job: 'Manager' },
  ];

  // Define two different sets of columns
  displayedColumns1: string[] = ['name', 'age'];
  displayedColumns2: string[] = ['name', 'age', 'job'];

  // Initial data and columns
  displayedColumns = this.displayedColumns1;
  dataSource = this.dataSource1;
  currentTable = 1;
  animationState: string = 'left'; // Default animation state to slide left

  // Toggles between tables and changes animation direction
  toggleTable() {
    if (this.currentTable == 1) {
      this.displayedColumns = this.displayedColumns2;
      this.dataSource = this.dataSource2;
      this.currentTable = 2;
      this.animationState = 'left'; // New table slides in from right to left
    } else {
      this.displayedColumns = this.displayedColumns1;
      this.dataSource = this.dataSource1;
      this.currentTable = 1;
      this.animationState = 'right'; // New table slides in from left to right
    }
  }
}
export interface ITable {
  Name: string;
  Country: string;
}


==============>

<div>
  <!-- Slide animation applied to the entire table -->
  <div *ngIf="currentTable === 1" [@slideAnimation]="animationState">
    <button mat-button (click)="toggleTable()">Toggle Table</button>
    <table mat-table [dataSource]="dataSource" class="mat-elevation-z8">
      <ng-container
        [matColumnDef]="column"
        *ngFor="let column of displayedColumns"
      >
        <th mat-header-cell *matHeaderCellDef>{{ column | titlecase }}</th>
        <td mat-cell *matCellDef="let element">{{ element[column] }}</td>
      </ng-container>
      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
    </table>
  </div>

  <div *ngIf="currentTable === 2" [@slideAnimation]="animationState">
    <button mat-button (click)="toggleTable()">Toggle Table</button>
    <table mat-table [dataSource]="dataSource" class="mat-elevation-z8">
      <ng-container
        [matColumnDef]="column"
        *ngFor="let column of displayedColumns"
      >
        <th mat-header-cell *matHeaderCellDef>{{ column | titlecase }}</th>
        <td mat-cell *matCellDef="let element">{{ element[column] }}</td>
      </ng-container>
      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
    </table>
  </div>

  <!-- Button to toggle between tables -->
</div>


==>>>>>>>>>>>>


table {
  width: 100%;
  margin-bottom: 20px;
}

th,
td {
  padding: 8px;
  text-align: left;
}

button {
  margin-top: 20px;
}